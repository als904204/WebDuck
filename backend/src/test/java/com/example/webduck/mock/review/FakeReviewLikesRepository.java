package com.example.webduck.mock.review;

import com.example.webduck.review.domain.ReviewLikes;
import com.example.webduck.review.service.port.ReviewLikesRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeReviewLikesRepository implements ReviewLikesRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<ReviewLikes> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public ReviewLikes save(ReviewLikes reviewLikes) {
        if (reviewLikes.getId() == null || reviewLikes.getId() == 0) {
            ReviewLikes newReviewLikes = ReviewLikes.builder()
                .id(autoGeneratedId.incrementAndGet())
                .memberId(reviewLikes.getMemberId())
                .reviewId(reviewLikes.getReviewId())
                .build();

            data.add(newReviewLikes);
            return newReviewLikes;
        }
        data.removeIf(item -> Objects.equals(item.getId(), reviewLikes.getId()));
        data.add(reviewLikes);
        return reviewLikes;
    }


    @Override
    public Optional<ReviewLikes> findByReviewIdAndMemberId(Long reviewId, Long memberId) {
        return data.stream()
            .filter(reviewLike -> reviewLike.getReviewId().equals(reviewId) && reviewLike.getMemberId().equals(memberId))
            .findFirst();
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(item -> item.getId().equals(id));
    }

}
