package com.example.webduck.mock.member;

import com.example.webduck.global.exception.CustomException;
import com.example.webduck.global.exception.exceptionCode.LogicExceptionCode;
import com.example.webduck.member.domain.Member;
import com.example.webduck.member.infrastructure.SocialType;
import com.example.webduck.member.service.port.MemberRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeMemberRepository implements MemberRepository {


    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Member> data = Collections.synchronizedList(new ArrayList<>());


    @Override
    public Member save(Member member) {
        if (member.getId() == null || member.getId() == 0) {
            Member newMemberEntity = Member.builder()
                .id(autoGeneratedId.incrementAndGet())
                .username(member.getUsername())
                .email(member.getEmail())
                .role(member.getRole())
                .socialType(member.getSocialType())
                .socialId(member.getSocialId())
                .socialPk(member.getSocialPk())
                .build();

            data.add(newMemberEntity);
            return newMemberEntity;
        }else{
            data.removeIf(item -> Objects.equals(item.getId(), member.getId()));
            data.add(member);
            return member;
        }
    }


    @Override
    public Optional<Member> findByEmailAndSocialType(String email, SocialType socialType) {
        return data.stream().filter(
                member -> member.getEmail().equals(email) && member.getSocialType() == socialType)
            .findAny();
    }

    @Override
    public Optional<Member> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Member getById(Long id) {
        return findById(id).orElseThrow(() -> new CustomException(
            LogicExceptionCode.MEMBER_NOT_FOUND));
    }

    @Override
    public Optional<Member> findByUsername(String username) {
        return data.stream().filter(item -> item.getUsername().equals(username)).findAny();
    }

    @Override
    public boolean existsByUsername(String username) {
        return data.stream().anyMatch(member -> member.getUsername().equals(username));
    }

}
