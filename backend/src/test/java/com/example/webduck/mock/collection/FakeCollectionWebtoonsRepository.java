package com.example.webduck.mock.collection;

import com.example.webduck.collection.domain.CollectionWebtoons;
import com.example.webduck.collection.service.port.CollectionWebtoonsRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeCollectionWebtoonsRepository implements CollectionWebtoonsRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<CollectionWebtoons> data = Collections.synchronizedList(new ArrayList<>());


    public void saveAll(List<CollectionWebtoons> collectionWebtoons) {

        collectionWebtoons.stream().map(webtoon -> {
            CollectionWebtoons savedWebtoon = new CollectionWebtoons(
                autoGeneratedId.incrementAndGet(),
                webtoon.getOwnerId(),
                webtoon.getWebtoonId(),
                webtoon.getCollectionId()
            );
            data.add(savedWebtoon);
            return savedWebtoon;
        }).collect(Collectors.toList());
    }

    @Override
    public void deleteAllByCollectionId(Long collectionId) {
        data.removeIf(webtoon -> webtoon.getCollectionId().equals(collectionId));
    }

    @Override
    public List<CollectionWebtoons> findByCollectionId(Long collectionId) {
        return data.stream()
            .filter(cw -> cw.getCollectionId().equals(collectionId))
            .collect(Collectors.toList());
    }
}
