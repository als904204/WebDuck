package com.example.webduck.mock.webtoon;

import com.example.webduck.global.exception.CustomException;
import com.example.webduck.global.exception.exceptionCode.LogicExceptionCode;
import com.example.webduck.webtoon.domain.Webtoon;
import com.example.webduck.webtoon.controller.response.WebtoonGenreResponse;
import com.example.webduck.webtoon.controller.response.WebtoonPopularResponse;
import com.example.webduck.webtoon.infrastructure.Platform;
import com.example.webduck.webtoon.infrastructure.PublishDay;
import com.example.webduck.webtoon.infrastructure.WebtoonEntity.WebtoonSortCondition;
import com.example.webduck.webtoon.service.port.WebtoonRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeWebtoonRepository implements WebtoonRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);

    private final List<Webtoon> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public Webtoon save(Webtoon webtoon) {
        if (webtoon.getId() == null || webtoon.getId() == 0) {

            Webtoon newWebtoon = Webtoon.builder()
                .id(autoGeneratedId.incrementAndGet())
                .title(webtoon.getTitle())
                .summary(webtoon.getSummary())
                .originalImageName(webtoon.getOriginalImageName())
                .imagePath(webtoon.getImagePath())
                .publishDay(webtoon.getPublishDay())
                .platform(webtoon.getPlatform())
                .webtoonGenres(webtoon.getWebtoonGenres())
                .author(webtoon.getAuthor())
                .webtoonUrl(webtoon.getWebtoonUrl())
                .reviewCount(webtoon.getReviewCount())
                .build();
            data.add(newWebtoon);
            return newWebtoon;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), webtoon.getId()));
            data.add(webtoon);
            return webtoon;
        }
    }

    // todo :
    @Override
    public List<Webtoon> saveAll(List<Webtoon> webtoons) {
        return null;
    }

    @Override
    public List<Webtoon> findByCollectionId(Long collectionId) {
        return null;
    }


    @Override
    public boolean existsById(Long id) {
        return data.stream().anyMatch(webtoon -> webtoon.getId().equals(id));
    }

    @Override
    public boolean existsByPlatform(Platform platform) {
        return data.stream().anyMatch(webtoon -> webtoon.getPlatform().equals(platform));
    }

    @Override
    public Optional<Webtoon> findById(Long Id) {
        return data.stream().filter(webtoon -> webtoon.getId().equals(Id)).findAny();
    }

    @Override
    public Webtoon getById(Long id) {
        return findById(id).orElseThrow(()-> new CustomException(
            LogicExceptionCode.WEBTOON_NOT_FOUND));
    }

    @Override
    public List<Webtoon> findWebtoonsByPublishDay(PublishDay publishDay) {
        return data.stream()
            .filter(webtoon -> webtoon.getPublishDay().equals(publishDay))
            .collect(Collectors.toList());
    }

    @Override
    public List<Webtoon> findWebtoonsByPlatform(Platform platform) {
        return data.stream()
            .filter(webtoon -> webtoon.getPlatform().equals(platform))
            .collect(Collectors.toList());
    }

    @Override
    public List<Webtoon> findAllByIdIn(List<Long> webtoonIds) {
        return data.stream()
            .filter(webtoon -> webtoonIds.contains(webtoon.getId()))
            .collect(Collectors.toList());
    }

    @Override
    public List<Webtoon> findAll() {
        return new ArrayList<>(data);
    }


    @Override
    public List<WebtoonGenreResponse> findWebtoonsByGenres(List<String> genreNames) {

        return Collections.emptyList();
    }

    @Override
    public List<WebtoonPopularResponse> findPopularWebtoonsByCondition(
        WebtoonSortCondition condition) {
        return Collections.emptyList();
    }


}
