package com.example.webduck.mock.collection;

import com.example.webduck.collection.domain.Collection;
import com.example.webduck.collection.service.port.CollectionRepository;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;

public class FakeCollectionRepository implements CollectionRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);

    private final List<Collection> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public List<Collection> findAll() {
        return data;
    }

    @Override
    public Optional<Collection> findById(Long id) {
        return data.stream().filter(item -> item.getId().equals(id)).findAny();
    }

    @Override
    public Collection save(Collection collection) {
        if (collection.getId() == null || collection.getId() == 0) {
            Collection newCollection = Collection.builder()
                .id(autoGeneratedId.incrementAndGet())
                .title(collection.getTitle())
                .description(collection.getDescription())
                .ownerId(collection.getOwnerId())
                .ownerName(collection.getOwnerName())
                .build();

            data.add(newCollection);
            return newCollection;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), collection.getId()));
            data.add(collection);
            return collection;
        }
    }

    @Override
    public List<Collection> findCollectionsByOwnerId(Long ownerId) {
        return data.stream()
            .filter(collection -> ownerId.equals(collection.getOwnerId()))
            .collect(Collectors.toList());
    }

    @Override
    public Optional<Collection> findCollectionByOwnerId(Long id) {
        return data.stream()
            .filter(collection -> id.equals(collection.getOwnerId())).findAny();
    }

    @Override
    public void deleteById(Long id) {
        data.removeIf(collection -> collection.getId().equals(id));
    }



}
